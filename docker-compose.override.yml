# docker-compose.override.yml
# Hardens startup to avoid "Unable to enable DNAT rule / No chain/target/match" races.

x-waits: &wait_on_docker_ready
  docker-ready:
    condition: service_healthy

services:
  # Host iptables/NAT readiness gate (quick, no ports/volumes).
  docker-ready:
    image: alpine:3
    network_mode: host
    cap_add: [ "NET_ADMIN" ]
    entrypoint: ["/bin/sh","-lc"]
    command: >
      apk add --no-cache iptables >/dev/null 2>&1 || true;
      for i in $(seq 1 10); do
        iptables -t nat -L DOCKER >/dev/null 2>&1 && exit 0 || sleep 2;
      done;
      echo "DOCKER chain not ready" >&2; exit 1
    healthcheck:
      test: ["CMD-SHELL","iptables -t nat -L DOCKER >/dev/null 2>&1"]
      interval: 3s
      timeout: 2s
      retries: 5
      start_period: 3s
    restart: on-failure

  # Gate every service that publishes host ports (keeps your originals intact)

  portal:
    depends_on:
      <<: *wait_on_docker_ready

  portainer:
    depends_on:
      <<: *wait_on_docker_ready

  mitre-navigator:
    depends_on:
      <<: *wait_on_docker_ready

  wireshark:
    # You use network_mode: host in base â†’ ports are ignored there; silence warning.
    ports: []

  evebox:
    depends_on:
      <<: *wait_on_docker_ready

  velociraptor:
    depends_on:
      <<: *wait_on_docker_ready

  # MISP core already depends on redis/db/modules; we keep those + add the gate.
  misp-core:
    depends_on:
      <<: *wait_on_docker_ready
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      misp-modules:
        condition: service_healthy

  cyberchef:
    depends_on:
      <<: *wait_on_docker_ready

  # Arkime: replace env-var depends_on with the actual service key (os01) + gate.
  # Also unify duplicate port mapping while keeping your default behavior.
  arkime:
    depends_on:
      <<: *wait_on_docker_ready
      os01:
        condition: service_started
    ports:
      - "${ARKIME_PORT:-7008}:8005"

  fleet-redis:
    depends_on:
      <<: *wait_on_docker_ready

  # Keep original deps and add gate.
  fleet-server:
    depends_on:
      <<: *wait_on_docker_ready
      fleet-mysql:
        condition: service_healthy
      fleet-redis:
        condition: service_started

  thehive:
    depends_on:
      <<: *wait_on_docker_ready

  elasticsearch:
    depends_on:
      <<: *wait_on_docker_ready

  # Keep original dep on elasticsearch and add gate.
  cortex:
    depends_on:
      <<: *wait_on_docker_ready
      elasticsearch:
        condition: service_started

  # These three used a list in base; we re-state them as a mapping to preserve deps and add gate.

  wazuh.manager:
    depends_on:
      <<: *wait_on_docker_ready
      generator:
        condition: service_started

  wazuh.indexer:
    depends_on:
      <<: *wait_on_docker_ready
      generator:
        condition: service_started

  wazuh.dashboard:
    depends_on:
      <<: *wait_on_docker_ready
      wazuh.indexer:
        condition: service_started
      generator:
        condition: service_started

  shuffle-frontend:
    depends_on:
      <<: *wait_on_docker_ready
      shuffle-backend:
        condition: service_started

  shuffle-backend:
    depends_on:
      <<: *wait_on_docker_ready

  shuffle-opensearch:
    depends_on:
      <<: *wait_on_docker_ready
      opensearch-init:
        condition: service_started

  openvas:
    depends_on:
      <<: *wait_on_docker_ready
